list

(def [true]
  1)

(def [false]
  0)

(def [nil] ())

(def [fun] 
  (\ [args body] 
    [def (list (head args)) 
      (\ (tail args) body)]))

(fun [not n]
    [if (== n 0) [1] [0]])

(fun [is-nil n] 
    [== n nil])

(fun [not-nil n] 
    [not (== n nil)])

(fun [cons x xs]
    [join
        (if (== x [])
            [x]
            [list x])
        xs])

(fun [snoc x xs]
  [join xs (list x)])

(fun [curry f xs] 
  [eval 
    (join (list f) xs)])

(fun [uncurry f : xs] 
  [f xs])

(fun [is-empty l] 
    [if (== l []) 
        [true] 
        [false]])
            
(fun [len l] 
    [if (is-empty l) 
        [0] 
        [+ 1 (len (tail l))]])

(fun [iter target base step]
    [if (== 0 target)
        [base]
        [step (\ [] [iter (dec target) base step])]]) 

(fun [rec target base step]
    [if (== 0 target)
        [base]
        [step (dec target)
            (\ [] [rec (dec target) base step])]])
            
(fun [rec-list target base step]
    [if (== 0 (len target))
        [base]
        [step 
            (head target)
            (\ [] [rec-list (tail target) base step])]])

(fun [nth n l]
    [head (rec n
        l
        (\ [n-1 nthn-1] [tail (nthn-1)]))])

(fun [append n] [eval (cons concat n)])

(fun [reverse l] 
  [if (== (len l) 1) 
    [l] 
    [snoc (head l) (reverse (tail l))]])

(fun [dec n] [- n 1])

(fun [add1 n] [+ n 1])

(fun [add a b] 
  [iter a 
    b 
    (\ [n-1] 
      [+ 1 n-1])])

(fun [gauss n] 
  [rec n 
    0 
    (\ [n-1 gaussn-1] 
      [+ (add1 n-1) (gaussn-1)])])

(fun [nth n l]
  [head (rec n
    l
    (\ [n-1 nthn-1] [tail (nthn-1)]))])

(fun [fac n]
  [rec n
    1
    (\ [n-1 facn-1]
      [* (add1 n-1) (facn-1)])])

(fun [repeat how-many item]
  [rec how-many
    []
    (\ [l-1 peasl-1]
    [cons item peasl-1])])

(fun [primep n]
  [rec n 0
    (\ [n-1 primepn-1]
      [if (== 0 (% n n-1))
        [n-1]
        [primepn-1]])])

(fun [gcd a b]
  [if (== b 0) [a] [gcd b (% a b)]])

(fun [zip a b]
  [reverse (rec (len a)
    []
    (\ [n-1 zipn-1]
      [cons
        (list (nth n-1 a) (nth n-1 b))
        (zipn-1)]))])

(fun [map target mapper]
    [rec-list target [] (\ [e es] [cons (mapper e) (es)])])

(fun [filter target filterer]
    [rec-list target [] (\ [e es] [if (filterer e) [cons e (es)] [(es)]])])